package week1Task;
import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.util.*;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import org.xml.sax.*;

public class QuoteServlet extends HttpServlet {
    private static final String XML_FILE_PATH = "/WEB-INF/quotes.xml";
    private Document document;
    private Random random = new Random();

    public void init() throws ServletException {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            document = builder.parse(getServletContext().getResourceAsStream(XML_FILE_PATH));
        } catch (Exception ex) {
            throw new ServletException("Error loading XML file", ex);
        }
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getParameter("action");
        if ("random".equals(action)) {
            sendRandomQuote(response);
        } else if ("search".equals(action)) {
            String author = request.getParameter("author");
            if (author != null && !author.isEmpty()) {
                searchQuotesByAuthor(response, author);
            } else {
                response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Author parameter is missing");
            }
        } else {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid action");
        }
    }

    private void sendRandomQuote(HttpServletResponse response) throws IOException {
        NodeList quoteNodes = document.getElementsByTagName("quote");
        Element quoteElement = (Element) quoteNodes.item(random.nextInt(quoteNodes.getLength()));
        sendQuoteResponse(response, quoteElement.getTextContent());
    }

    private void searchQuotesByAuthor(HttpServletResponse response, String author) throws IOException {
        NodeList quoteNodes = document.getElementsByTagName("quote");
        StringBuilder matchingQuotes = new StringBuilder();
        for (int i = 0; i < quoteNodes.getLength(); i++) {
            Element quoteElement = (Element) quoteNodes.item(i);
            String currentAuthor = quoteElement.getAttribute("author");
            if (currentAuthor.equalsIgnoreCase(author)) {
                matchingQuotes.append(quoteElement.getTextContent()).append("\n");
            }
        }
        if (matchingQuotes.length() > 0) {
            sendQuoteResponse(response, matchingQuotes.toString());
        } else {
            response.setContentType("text/plain");
            response.getWriter().write("No quotes found for author: " + author);
        }
    }

    private void sendQuoteResponse(HttpServletResponse response, String quote) throws IOException {
        response.setContentType("text/plain");
        response.getWriter().write(quote);
    }
}


     


